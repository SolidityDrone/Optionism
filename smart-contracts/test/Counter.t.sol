// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import "../src/Optionism.sol";

contract OptionismTest is Test {
    Optionism op;

    function setUp() public {
        op = new Optionism(address(this));
    }

    function testCall() public {
        vm.deal(address(op), 1e18);
        // Example calldata
        bytes memory data = hex"87385bbc000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000062b504e41550100000003b801000000040d00db98349f08cd6afc5bc5e68bb3a9d6b8d33dd888bed9e8669bfcc5831e4c1c064ae556286ddedd4efe85fba67876ae8732d05fa8e4292e38eecd1cadabf89e210101dd545250f10a0e4dbf4ec0f7518609309c1dbaaeeab92810a110dcd9da1f13be7d501e1f9eef5a3d55647faf842da33cdc6cb5c80ce1344fa9205fef62bac4a80102d3060a9d7f0f07d3aa5975d7f8011a17a6696d8eac5456491fd465e10da7b8af71fe88a3b4381f546608a5a0c5a4b08b94612c3ab05b2bf883f16574763ae14d0003ec1fed3f626170e4e78bef9af5c55bf47e819d83ea2cd9db388736773d66f6ae02c07f82375251732a7c61dd650f0590d8969a23727b4b41e399424fa20dd4f801065ec5a056aa266b63cb647d23291d3d52073f7f06d6d7245d36166a7ab9b4912059442990b7e328d51899617735c2f56bae585f77e00ad4e3bde58e9cd259ed7f00090bc571527a9ca044129aee0f6a3dc24fcdc3245d59b144c0c3a5fcc029cd389f6aedc24d8311d9623803c6f1fe473aa3e491e03b719b67af084abf076152866e010a2ad87cbd88b6ec2d62ca88ea41af8bbad399fa93bc7b030c1b96756e16d1b6b25316dafe846860dfb62af70e8feac7f0932039bc8d39eb57c98fbe5fcd70a1bb010cba47113a51f2bf56560f10b11a0eb7852ce07bd4cc7e404876d9b8776f31a51f74fb040ad972c5b4a292597c5634d0e8ef0bf0558a2875169f029222a47b9e71010d594fa6ae4db0639184cae208bf88f011c2d03cc73c365bcf24de902dc0b8256871035c958a32e08d9cb54097eb7f2766e717d760dd1b496e149ac5926e2c5fed000e961468b3baf400c8db71d679bc6c1b4ec240aa98eeef4355f531282c6ee4962476ac07fc99d41b9d85f45cc5885ceaa64f9e951a7db9841539c1b238bce67bab010fb24d15ecebeb03e9d93e946293a04f8b033f71d67ae583f3dffaba847b7bd4365b8eb66a81084278d26fa26004101fc508ecc24676a16deb356ef86c3707718101117ad64e76c6f49acbfe6f76562a2b1b3a38353b74c1740c574bd371f8576ccef65259641dec810d9e83593bcb3a453ea1f054880e2ead23084f1e0867b6fa4ca200129ecd480f0f3b71a9cc83695aefb1b8dd55c837b5810393aa76f6fe66d76481531e47ed0baff8f8c35f6cf1f514e35e96d756ac0cf140a504e0e229c0c8bc89920066b12a4900000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa7100000000044bbdc7014155575600000000000956697700002710e1cbf06eace077d24eaec83df479a09ed6a9b24b020055009695e2b96ea7b3859da9ed25b7a46a920a776e2fdae19a7bcfdf2b219230452d0000000002977c8c000000000000af8ffffffffb0000000066b12a490000000066b12a480000000002983a5700000000000083ba0b2d0f48443ae9a4c6b0a4c7361b585dfdbfc4ed17f2c105c479fa55b729c8b5fe6e8616415391fa3c7353c3e84111b81311a0f2152695bdaeb97ceb26d4126e55d9357a38a78d9a48a3fc40e1630b672e603744437fe2a62a24e66dbfcc7317e930d00b80745e0bbcb0b7361f03bbe66c8de4ff1939f0b24cd2b3d1a177f85af3204dcbbf554fe6e35cb2b2e2e96fe5d3625c96f5432267273511b3aa6e52459050bebbcd5df402a91f8f001de3e2a8cf6aff3eb2e438bbebf0049b893e4d23dd13f2df794e38472a256007055960aafce3e15049de26a5bed3b33fd40055009695e2b96ea7b3859da9ed25b7a46a920a776e2fdae19a7bcfdf2b219230452d0000000002977c8c000000000000af8ffffffffb0000000066b12a490000000066b12a480000000002983a5700000000000083ba0b2d0f48443ae9a4c6b0a4c7361b585dfdbfc4ed17f2c105c479fa55b729c8b5fe6e8616415391fa3c7353c3e84111b81311a0f2152695bdaeb97ceb26d4126e55d9357a38a78d9a48a3fc40e1630b672e603744437fe2a62a24e66dbfcc7317e930d00b80745e0bbcb0b7361f03bbe66c8de4ff1939f0b24cd2b3d1a177f85af3204dcbbf554fe6e35cb2b2e2e96fe5d3625c96f5432267273511b3aa6e52459050bebbcd5df402a91f8f001de3e2a8cf6aff3eb2e438bbebf0049b893e4d23dd13f2df794e38472a256007055960aafce3e15049de26a5bed3b33fd4000000000000000000000000000000000000000000";
        
        // Call the contract with the calldata
        (bool success, bytes memory result) = address(op).call(data);
        
        // Check if the call was successful
        require(success, "Call failed");
        
        // Optional: Print the result
        console.logBytes(result);
        console.logUint(op.p());
    }
}
