// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import "../src/Optionism.sol";

contract OptionismTest is Test {
    Optionism op;

    function setUp() public {
        op = new Optionism(address(this));
    }

    function testCall() public {
        vm.deal(address(op), 1e18);
        // Example calldata
        bytes memory data = hex"87385bbc000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000062b504e41550100000003b801000000040d00d47fe4e0c188db2ea66dcd0e7fdf43e1d7a907876917e116762853c9673250f809f6d78eab5fb8f4d2aa36204fd9ffeb5a5bf40431da25f72de3a8d3225bbe7e0001554a4bfcf179861a7968b5ffc1ae9f062de8ea21d2da6bdb9ea2807b701538677c84d1691832e52d85633cbe445f1445762e4eb02bd20724f8f348a9195a6a0e0102acdf7abb87d690b29f5f05d80d686f80039861a0c28b834f132f6ba18e2e4fcf2517574d922adfc32f65015edc64dc894a60fd538f833cd3162ef1997533cd2000035336f73eb55fa74bbaa5662f4d41d92c6b8b7f15a177b9650da79646d40d53262d8c9be5ac8235bd50510c54a0f5516cfd9ec69d47327ef34796eeb5a5b1e9e50104d7f624bfa4bcdae96493f14f4ae534d7898ac174fd2ee985278cedb2e433d9384a4d10bde29a88ed35e3b7bc182c34086208d58baa5bc45f5adaf41edeeb54b8010681f70661600237922e178253b1f3a08483acfad1297604625679245f68d191617036719dbd1ec1da3754580836f609cd6d64bf06e66e92df821abfd35bc5890f000ac826b1585af15bd9e36486defb9036a61fb169d1899021ffad47f13a7cf8ba6131008462a27dcc4ad5f1319fe2899760b4966afb9c67dbd62010affa86f3a9b9010c6ee6b31a2077dc11618d906f931107fe8f853c8351d73c268b23ebb4aacada3f7ffe9b32cf5230502385663f391e70b8b6692e7084c2c9bae7f8445323d0885f000d2350cfc17ef133cdef3ddc9ebb78305b5ee29004e6ce165eac6ba1dbefdcb652063c24e8990c980e99f25e860ffea52672824302c40b567a3f634a96c303a828010ef6414ab80a58b002033e51ffe5c21b3db8a774cc55c4e34f6bc9098d7661230b0d0c12eee116a045a1dd9a9f9d44c2116f66737b1a12b8758f924ef8c23d5efa010feaf3409a169d6f80e72ea94180e1a7f8a40365d0bd35612a9a4c86792822364f63ffbf4369ee8afe62ffd873b57b6a3e8076f06f75bda41694ec0dd8a9af30f501100df7bd8b87f257ad9423e4764f8e4c034dd4398822ec4347df4f2284c983f972770f348f7973297db609bb7a1f70768c383e52ddafa335535f169cf34fd041f80012aa48d422e7ef938ca9837232af7de428cb25decc682a78e1dbaa3a87fcbd9e736b0e11319cbb1ca59804ef5bb20a822bbdb51c6ca4848dbc4a77cf9a9b2ea3c70166b13bd300000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa7100000000044be29c0141555756000000000009568e5500002710a29e31c9eec7d5627a98506c6a7c314cb1a76a420200550063f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b30000000001805c2600000000000090d9fffffff80000000066b13bd30000000066b13bd3000000000182636900000000000085b60bd7d8b7151c6b6388207383b5aa91a9c38c81f041a3cb7f960b781f3a9f68b9233c5e4862f1fdd55f320ab12e1c442a279b2ed5bde539a4bf32e3eb4baa339c7d83e3c44f7d415b8caa0092ee558430eb716529ef9b1bea1e7ec88ca41ec25c1a7aa5b8e27d2164b24633ea64ce14548ba9e183a70eb97a5e02457599cc2d44a537a1da648e8fa9121d35354d76cd1ed77a4828473df3b300358108e63f4231464ecb387cba16958e843124e5ce238a0afc8677ba2ec669189415dd99eeb0e6a2d8629ce3fb212fd02e96051cfb6670f1fbf4ac1c298429d754fb08c900550063f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b30000000001805c2600000000000090d9fffffff80000000066b13bd30000000066b13bd3000000000182636900000000000085b60bd7d8b7151c6b6388207383b5aa91a9c38c81f041a3cb7f960b781f3a9f68b9233c5e4862f1fdd55f320ab12e1c442a279b2ed5bde539a4bf32e3eb4baa339c7d83e3c44f7d415b8caa0092ee558430eb716529ef9b1bea1e7ec88ca41ec25c1a7aa5b8e27d2164b24633ea64ce14548ba9e183a70eb97a5e02457599cc2d44a537a1da648e8fa9121d35354d76cd1ed77a4828473df3b300358108e63f4231464ecb387cba16958e843124e5ce238a0afc8677ba2ec669189415dd99eeb0e6a2d8629ce3fb212fd02e96051cfb6670f1fbf4ac1c298429d754fb08c9000000000000000000000000000000000000000000";
        
        // Call the contract with the calldata
        (bool success, bytes memory result) = address(op).call(data);
        
        // Check if the call was successful
        require(success, "Call failed");
        
        // Optional: Print the result
        console.logBytes(result);
    }
}
